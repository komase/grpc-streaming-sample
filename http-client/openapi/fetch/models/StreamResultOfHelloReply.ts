/* tslint:disable */
/* eslint-disable */
/**
 * hello/hello.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HelloReply } from './HelloReply';
import {
    HelloReplyFromJSON,
    HelloReplyFromJSONTyped,
    HelloReplyToJSON,
} from './HelloReply';
import type { RpcStatus } from './RpcStatus';
import {
    RpcStatusFromJSON,
    RpcStatusFromJSONTyped,
    RpcStatusToJSON,
} from './RpcStatus';

/**
 * 
 * @export
 * @interface StreamResultOfHelloReply
 */
export interface StreamResultOfHelloReply {
    /**
     * 
     * @type {HelloReply}
     * @memberof StreamResultOfHelloReply
     */
    result?: HelloReply;
    /**
     * 
     * @type {RpcStatus}
     * @memberof StreamResultOfHelloReply
     */
    error?: RpcStatus;
}

/**
 * Check if a given object implements the StreamResultOfHelloReply interface.
 */
export function instanceOfStreamResultOfHelloReply(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StreamResultOfHelloReplyFromJSON(json: any): StreamResultOfHelloReply {
    return StreamResultOfHelloReplyFromJSONTyped(json, false);
}

export function StreamResultOfHelloReplyFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamResultOfHelloReply {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'result': !exists(json, 'result') ? undefined : HelloReplyFromJSON(json['result']),
        'error': !exists(json, 'error') ? undefined : RpcStatusFromJSON(json['error']),
    };
}

export function StreamResultOfHelloReplyToJSON(value?: StreamResultOfHelloReply | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'result': HelloReplyToJSON(value.result),
        'error': RpcStatusToJSON(value.error),
    };
}

